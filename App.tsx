import React, { useState } from 'react';
import { useBinanceTradingData } from './hooks/useBinanceTradingData';
import { useAuth } from './hooks/useAuth';
import { useSupabaseData } from './hooks/useSupabaseData';
import { Alert, PaperTrade, TradeStatus, CloseReason, TradeSide } from './types';
import { ToastContainer, useToast } from './components/Toast';
import { Header } from './components/Header';
import { MarketOverview } from './components/MarketOverview';
import { TimeframeSelector } from './components/TimeframeSelector';
import { Card } from './components/Card';
import { AlertCard } from './components/AlertCard';
import { LogTradeModal } from './components/LogTradeModal';
import { TradeRow } from './components/TradeRow';
import { DashboardToggle } from './components/DashboardToggle';
import { AutoTraderDashboard } from './components/auto-trader/AutoTraderDashboard';
import { AuthModal } from './components/AuthModal';

const App: React.FC = () => {
  const { user, loading: authLoading } = useAuth();
  const [timeframe, setTimeframe] = useState('5m');
  const [dashboardMode, setDashboardMode] = useState<'manual' | 'auto'>('manual');
  const { toasts, addToast, removeToast } = useToast();
  const { marketData, alerts, loading } = useBinanceTradingData(timeframe, addToast);
  const { paperTrades, savePaperTrade, updatePaperTrade, loading: dataLoading } = useSupabaseData();
  const [selectedAlert, setSelectedAlert] = useState<Alert | null>(null);

  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const [authMode, setAuthMode] = useState<'login' | 'signup'>('login');

  const openTrades = paperTrades.filter(t => t.status === TradeStatus.OPEN);
  const closedTrades = paperTrades.filter(t => t.status === TradeStatus.CLOSED);

  // Effect to check for TP/SL on open trades
  React.useEffect(() => {
    if (marketData.length > 0 && openTrades.length > 0) {
      openTrades.forEach(trade => {
        const currentMarketData = marketData.find(m => m.symbol === trade.symbol);
        if (!currentMarketData || currentMarketData.price === 0) return;

        const currentPrice = currentMarketData.price;
        let reason: CloseReason | null = null;
        
        if (trade.side === TradeSide.BUY) {
          if (currentPrice >= trade.tp) reason = CloseReason.TP;
          else if (currentPrice <= trade.sl) reason = CloseReason.SL;
        } else { // SELL
          if (currentPrice <= trade.tp) reason = CloseReason.TP;
          else if (currentPrice >= trade.sl) reason = CloseReason.SL;
        }

        if (reason) {
          const profit = (trade.side === TradeSide.BUY) 
            ? (currentPrice - trade.entryPrice) * trade.qty 
            : (trade.entryPrice - currentPrice) * trade.qty;

          const updatedTrade = {
            status: TradeStatus.CLOSED,
            closedAt: new Date(),
            closePrice: currentPrice,
            profit,
            reason,
          };

          updatePaperTrade(trade.id, updatedTrade);
          
          const isProfit = profit > 0;
          const message = `${trade.symbol} trade closed: ${isProfit ? '+' : ''}$${profit.toFixed(2)} (${reason})`;
          addToast(message, isProfit ? 'success' : 'error');
        }
      });
    }
  }, [marketData, openTrades, updatePaperTrade, addToast]);

  const handleLogTrade = (tradeData: Omit<PaperTrade, 'id' | 'status' | 'openedAt'>) => {
    const newTrade: PaperTrade = {
      ...tradeData,
      id: '', // Will be generated by Supabase
      status: TradeStatus.OPEN,
      openedAt: new Date(),
    };
    savePaperTrade(newTrade);
    setSelectedAlert(null);
    addToast(`Trade logged for ${tradeData.symbol}`, 'success');
  };

  const handleCloseTrade = (tradeId: string) => {
    const trade = paperTrades.find(t => t.id === tradeId);
    if (!trade || trade.status !== TradeStatus.OPEN) return;

    const currentMarketData = marketData.find(m => m.symbol === trade.symbol);
    if (!currentMarketData) return;

    const currentPrice = currentMarketData.price;
    const profit = (trade.side === TradeSide.BUY) 
      ? (currentPrice - trade.entryPrice) * trade.qty 
      : (trade.entryPrice - currentPrice) * trade.qty;

    const updatedTrade = {
      status: TradeStatus.CLOSED,
      closedAt: new Date(),
      closePrice: currentPrice,
      profit,
      reason: CloseReason.MANUAL,
    };

    updatePaperTrade(tradeId, updatedTrade);
    
    const isProfit = profit > 0;
    const message = `${trade.symbol} trade manually closed: ${isProfit ? '+' : ''}$${profit.toFixed(2)}`;
    addToast(message, isProfit ? 'success' : 'info');
  };

  const handleOpenLogin = () => {
    setAuthMode('login');
    setIsAuthModalOpen(true);
  };

  const handleOpenSignup = () => {
    setAuthMode('signup');
    setIsAuthModalOpen(true);
  };

  const handleCloseAuthModal = () => {
    setIsAuthModalOpen(false);
  };

  const handleAuthSuccess = () => {
    addToast('Successfully logged in!', 'success');
  };

  // Show loading screen while checking authentication
  if (authLoading) {
    return (
      <div className="bg-gray-900 text-white min-h-screen font-sans flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-indigo-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-400">Loading...</p>
        </div>
      </div>
    );
  }

  // Show login prompt for unauthenticated users
  if (!user) {
    return (
      <div className="bg-gray-900 text-white min-h-screen font-sans">
        <Header 
          loading={loading} 
          onLoginClick={handleOpenLogin} 
          onSignupClick={handleOpenSignup} 
        />
        <main className="container mx-auto p-4 sm:p-6 lg:p-8 flex items-center justify-center min-h-[calc(100vh-4rem)]">
          <div className="text-center max-w-md">
            <h1 className="text-3xl font-bold mb-4">Welcome to RSI Dashboard</h1>
            <p className="text-gray-400 mb-8">
              Sign in to access your personalized trading dashboard with real-time RSI alerts, 
              paper trading, and automated trading features.
            </p>
            <div className="space-y-4">
              <button 
                onClick={handleOpenLogin}
                className="w-full px-6 py-3 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold rounded-md transition-colors"
              >
                Sign In
              </button>
              <button 
                onClick={handleOpenSignup}
                className="w-full px-6 py-3 border border-gray-600 hover:bg-gray-800 text-white font-semibold rounded-md transition-colors"
              >
                Create Account
              </button>
            </div>
          </div>
        </main>
        <ToastContainer toasts={toasts} onRemove={removeToast} />
        {isAuthModalOpen && (
          <AuthModal
            initialMode={authMode}
            onClose={handleCloseAuthModal}
            onSuccess={handleAuthSuccess}
          />
        )}
      </div>
    );
  }
  return (
    <div className="bg-gray-900 text-white min-h-screen font-sans">
      <Header 
        loading={loading} 
        onLoginClick={handleOpenLogin} 
        onSignupClick={handleOpenSignup} 
      />
      <main className="container mx-auto p-4 sm:p-6 lg:p-8 space-y-6">
        <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-4">
            <h1 className="text-2xl font-bold tracking-tight">Dashboard</h1>
            <div className="flex items-center gap-4">
              <DashboardToggle mode={dashboardMode} setMode={setDashboardMode} />
              <div className="hidden sm:block">
                <TimeframeSelector selectedTimeframe={timeframe} onTimeframeChange={setTimeframe} />
              </div>
            </div>
        </div>

        {/* Mobile-only Timeframe Selector */}
        <div className="block sm:hidden">
          <TimeframeSelector selectedTimeframe={timeframe} onTimeframeChange={setTimeframe} />
        </div>

        {dashboardMode === 'manual' ? (
          <>
            <MarketOverview marketData={marketData} />
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="lg:col-span-1 space-y-4">
                <Card title="RSI Alerts" count={alerts.length}>
                  <div className="space-y-3 max-h-[600px] overflow-y-auto pr-2">
                    {alerts.length > 0 ? (
                      alerts.map(alert => (
                        <AlertCard key={alert.id} alert={alert} onLogTrade={() => setSelectedAlert(alert)} />
                      ))
                    ) : (
                      <p className="text-gray-400 text-center py-8">No new alerts.</p>
                    )}
                  </div>
                </Card>
              </div>

              <div className="lg:col-span-2 space-y-6">
                <Card title="Open Trades" count={openTrades.length}>
                  <div className="overflow-x-auto max-h-[300px] overflow-y-auto">
                    {openTrades.length > 0 ? (
                      <table className="w-full text-sm text-left">
                        <thead className="text-xs text-gray-400 uppercase bg-gray-900/50">
                          <tr>
                            <th scope="col" className="p-3">Symbol</th>
                            <th scope="col" className="p-3 hidden md:table-cell">Side</th>
                            <th scope="col" className="p-3">Entry</th>
                            <th scope="col" className="p-3">TP/SL</th>
                            <th scope="col" className="p-3 hidden sm:table-cell">Qty</th>
                            <th scope="col" className="p-3 hidden lg:table-cell">Time</th>
                          </tr>
                        </thead>
                        <tbody>
                          {openTrades.map(trade => (
                            <TradeRow 
                              key={trade.id} 
                              trade={trade} 
                              onCloseTrade={handleCloseTrade}
                            />
                          ))}
                        </tbody>
                      </table>
                    ) : (
                      <p className="text-gray-400 text-center py-8">No open trades.</p>
                    )}
                  </div>
                </Card>

                <Card title="Trade History" count={closedTrades.length}>
                  <div className="overflow-x-auto max-h-[300px] overflow-y-auto">
                  {closedTrades.length > 0 ? (
                      <table className="w-full text-sm text-left">
                        <thead className="text-xs text-gray-400 uppercase bg-gray-900/50">
                          <tr>
                            <th scope="col" className="p-3">Symbol</th>
                            <th scope="col" className="p-3 hidden sm:table-cell">Side</th>
                            <th scope="col" className="p-3">Profit</th>
                            <th scope="col" className="p-3 hidden md:table-cell">Reason</th>
                            <th scope="col" className="p-3 hidden lg:table-cell">Duration</th>
                          </tr>
                        </thead>
                        <tbody>
                          {closedTrades.map(trade => <TradeRow key={trade.id} trade={trade} />)}
                        </tbody>
                      </table>
                    ) : (
                      <p className="text-gray-400 text-center py-8">No closed trades yet.</p>
                    )}
                  </div>
                </Card>
              </div>
            </div>
          </>
        ) : (
          <AutoTraderDashboard marketData={marketData} addToast={addToast} />
        )}
      </main>

      <ToastContainer toasts={toasts} onRemove={removeToast} />

      {selectedAlert && (
        <LogTradeModal
          alert={selectedAlert}
          onClose={() => setSelectedAlert(null)}
          onLogTrade={handleLogTrade}
        />
      )}

      {isAuthModalOpen && (
        <AuthModal
          initialMode={authMode}
          onClose={handleCloseAuthModal}
          onSuccess={handleAuthSuccess}
        />
      )}
    </div>
  );
};

export default App;