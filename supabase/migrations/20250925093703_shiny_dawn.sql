/*
  # Complete Trading Dashboard Schema

  1. New Tables
    - `user_profiles` - Extended user information
    - `alerts` - RSI alerts generated by the system
    - `paper_trades` - Manual paper trades
    - `auto_trades` - Automated trades
    - `auto_trader_settings` - User's auto-trader configuration

  2. Security
    - Enable RLS on all tables
    - Add policies for authenticated users to access only their own data
    - Proper foreign key relationships

  3. Features
    - Real-time subscriptions support
    - Automatic timestamps
    - Proper data types for trading data
*/

-- Create user profiles table
CREATE TABLE IF NOT EXISTS user_profiles (
  id uuid REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  email text NOT NULL,
  full_name text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create alerts table
CREATE TABLE IF NOT EXISTS alerts (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  symbol text NOT NULL,
  rsi numeric(5,2) NOT NULL,
  price numeric(15,8) NOT NULL,
  level integer NOT NULL,
  timeframe text NOT NULL DEFAULT '5m',
  created_at timestamptz DEFAULT now()
);

-- Create paper trades table
CREATE TABLE IF NOT EXISTS paper_trades (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  symbol text NOT NULL,
  side text NOT NULL CHECK (side IN ('BUY', 'SELL')),
  entry_price numeric(15,8) NOT NULL,
  tp numeric(15,8) NOT NULL,
  sl numeric(15,8) NOT NULL,
  qty numeric(15,8) NOT NULL,
  status text NOT NULL DEFAULT 'OPEN' CHECK (status IN ('OPEN', 'CLOSED')),
  close_price numeric(15,8),
  profit numeric(15,8),
  close_reason text CHECK (close_reason IN ('TP', 'SL', 'MANUAL')),
  opened_at timestamptz DEFAULT now(),
  closed_at timestamptz,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create auto trades table
CREATE TABLE IF NOT EXISTS auto_trades (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  symbol text NOT NULL,
  entry_price numeric(15,8) NOT NULL,
  tp numeric(15,8) NOT NULL,
  sl numeric(15,8) NOT NULL,
  qty numeric(15,8) NOT NULL,
  investment numeric(15,8) NOT NULL,
  status text NOT NULL DEFAULT 'OPEN' CHECK (status IN ('OPEN', 'TP_HIT', 'SL_HIT', 'MISSED')),
  close_price numeric(15,8),
  profit numeric(15,8),
  opened_at timestamptz DEFAULT now(),
  closed_at timestamptz,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create auto trader settings table
CREATE TABLE IF NOT EXISTS auto_trader_settings (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL UNIQUE,
  capital numeric(15,2) NOT NULL DEFAULT 1000,
  current_capital numeric(15,2) NOT NULL DEFAULT 1000,
  risk_percent numeric(5,2) NOT NULL DEFAULT 10,
  is_active boolean NOT NULL DEFAULT false,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE alerts ENABLE ROW LEVEL SECURITY;
ALTER TABLE paper_trades ENABLE ROW LEVEL SECURITY;
ALTER TABLE auto_trades ENABLE ROW LEVEL SECURITY;
ALTER TABLE auto_trader_settings ENABLE ROW LEVEL SECURITY;

-- Create policies for user_profiles
CREATE POLICY "Users can read own profile"
  ON user_profiles
  FOR SELECT
  TO authenticated
  USING (auth.uid() = id);

CREATE POLICY "Users can update own profile"
  ON user_profiles
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = id);

CREATE POLICY "Users can insert own profile"
  ON user_profiles
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = id);

-- Create policies for alerts
CREATE POLICY "Users can read own alerts"
  ON alerts
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own alerts"
  ON alerts
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own alerts"
  ON alerts
  FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Create policies for paper_trades
CREATE POLICY "Users can read own paper trades"
  ON paper_trades
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own paper trades"
  ON paper_trades
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own paper trades"
  ON paper_trades
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own paper trades"
  ON paper_trades
  FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Create policies for auto_trades
CREATE POLICY "Users can read own auto trades"
  ON auto_trades
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own auto trades"
  ON auto_trades
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own auto trades"
  ON auto_trades
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own auto trades"
  ON auto_trades
  FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Create policies for auto_trader_settings
CREATE POLICY "Users can read own auto trader settings"
  ON auto_trader_settings
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own auto trader settings"
  ON auto_trader_settings
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own auto trader settings"
  ON auto_trader_settings
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS alerts_user_id_created_at_idx ON alerts(user_id, created_at DESC);
CREATE INDEX IF NOT EXISTS paper_trades_user_id_status_idx ON paper_trades(user_id, status);
CREATE INDEX IF NOT EXISTS auto_trades_user_id_status_idx ON auto_trades(user_id, status);
CREATE INDEX IF NOT EXISTS paper_trades_symbol_idx ON paper_trades(symbol);
CREATE INDEX IF NOT EXISTS auto_trades_symbol_idx ON auto_trades(symbol);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON user_profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_paper_trades_updated_at BEFORE UPDATE ON paper_trades FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_auto_trades_updated_at BEFORE UPDATE ON auto_trades FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_auto_trader_settings_updated_at BEFORE UPDATE ON auto_trader_settings FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();